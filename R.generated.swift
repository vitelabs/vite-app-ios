//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 56 images.
  struct image {
    /// Image `background_button_blue`.
    static let background_button_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_blue")
    /// Image `background_button_white`.
    static let background_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_white")
    /// Image `bar_icon_my`.
    static let bar_icon_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_my")
    /// Image `bar_icon_qrcode`.
    static let bar_icon_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_qrcode")
    /// Image `bar_icon_scan`.
    static let bar_icon_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_scan")
    /// Image `bar_icon_wallet`.
    static let bar_icon_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_wallet")
    /// Image `beifen`.
    static let beifen = Rswift.ImageResource(bundle: R.hostingBundle, name: "beifen")
    /// Image `empty`.
    static let empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `face_id`.
    static let face_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_id")
    /// Image `feed`.
    static let feed = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed")
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `gift`.
    static let gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift")
    /// Image `home_wallet_address_copy`.
    static let home_wallet_address_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_wallet_address_copy")
    /// Image `icon_address_manage_selected`.
    static let icon_address_manage_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_manage_selected")
    /// Image `icon_button_facebook`.
    static let icon_button_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_facebook")
    /// Image `icon_button_github`.
    static let icon_button_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_github")
    /// Image `icon_button_infor`.
    static let icon_button_infor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_infor")
    /// Image `icon_button_light`.
    static let icon_button_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_light")
    /// Image `icon_button_medium`.
    static let icon_button_medium = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_medium")
    /// Image `icon_button_paste_blue`.
    static let icon_button_paste_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_blue")
    /// Image `icon_button_paste_white`.
    static let icon_button_paste_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_white")
    /// Image `icon_button_reddit`.
    static let icon_button_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_reddit")
    /// Image `icon_button_telegram`.
    static let icon_button_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_telegram")
    /// Image `icon_button_twitter`.
    static let icon_button_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_twitter")
    /// Image `icon_button_wechat`.
    static let icon_button_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_wechat")
    /// Image `icon_button_youtube`.
    static let icon_button_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_youtube")
    /// Image `icon_cell_select`.
    static let icon_cell_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_select")
    /// Image `icon_cell_unselect`.
    static let icon_cell_unselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_unselect")
    /// Image `icon_nav_back_black`.
    static let icon_nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_black")
    /// Image `icon_nav_close_black`.
    static let icon_nav_close_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_close_black")
    /// Image `icon_nav_photo_black`.
    static let icon_nav_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_photo_black")
    /// Image `icon_nav_qrcode_black`.
    static let icon_nav_qrcode_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_qrcode_black")
    /// Image `icon_nav_scan_black`.
    static let icon_nav_scan_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_scan_black")
    /// Image `icon_nav_share_black`.
    static let icon_nav_share_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_share_black")
    /// Image `icon_right_white`.
    static let icon_right_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right_white")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_tabbar_me_select`.
    static let icon_tabbar_me_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_me_select")
    /// Image `icon_tabbar_me`.
    static let icon_tabbar_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_me")
    /// Image `icon_tabbar_wallet_select`.
    static let icon_tabbar_wallet_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet_select")
    /// Image `icon_tabbar_wallet`.
    static let icon_tabbar_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet")
    /// Image `icon_transcation_request`.
    static let icon_transcation_request = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transcation_request")
    /// Image `icon_transcation_response`.
    static let icon_transcation_response = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transcation_response")
    /// Image `icon_transrecord`.
    static let icon_transrecord = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transrecord")
    /// Image `icon_tx_recieve`.
    static let icon_tx_recieve = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_recieve")
    /// Image `icon_tx_send`.
    static let icon_tx_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_send")
    /// Image `icon_vite_logo`.
    static let icon_vite_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vite_logo")
    /// Image `icon_wallet_token_default`.
    static let icon_wallet_token_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_token_default")
    /// Image `icon_wallet_token_vcc`.
    static let icon_wallet_token_vcc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_token_vcc")
    /// Image `icon_wallet_token_vite`.
    static let icon_wallet_token_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_token_vite")
    /// Image `icon_wallet`.
    static let icon_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet")
    /// Image `launch_screen_logo`.
    static let launch_screen_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_screen_logo")
    /// Image `splash_about`.
    static let splash_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_about")
    /// Image `splash_slogen`.
    static let splash_slogen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_slogen")
    /// Image `success`.
    static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "success")
    /// Image `vite`.
    static let vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "vite")
    
    /// `UIImage(named: "background_button_blue", bundle: ..., traitCollection: ...)`
    static func background_button_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_white", bundle: ..., traitCollection: ...)`
    static func background_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_my", bundle: ..., traitCollection: ...)`
    static func bar_icon_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_my, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_qrcode", bundle: ..., traitCollection: ...)`
    static func bar_icon_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_scan", bundle: ..., traitCollection: ...)`
    static func bar_icon_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_wallet", bundle: ..., traitCollection: ...)`
    static func bar_icon_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beifen", bundle: ..., traitCollection: ...)`
    static func beifen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beifen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty", bundle: ..., traitCollection: ...)`
    static func empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_id", bundle: ..., traitCollection: ...)`
    static func face_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_id, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feed", bundle: ..., traitCollection: ...)`
    static func feed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gift", bundle: ..., traitCollection: ...)`
    static func gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_wallet_address_copy", bundle: ..., traitCollection: ...)`
    static func home_wallet_address_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_wallet_address_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_address_manage_selected", bundle: ..., traitCollection: ...)`
    static func icon_address_manage_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_manage_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_facebook", bundle: ..., traitCollection: ...)`
    static func icon_button_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_github", bundle: ..., traitCollection: ...)`
    static func icon_button_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_github, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_infor", bundle: ..., traitCollection: ...)`
    static func icon_button_infor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_infor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_light", bundle: ..., traitCollection: ...)`
    static func icon_button_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_medium", bundle: ..., traitCollection: ...)`
    static func icon_button_medium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_medium, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_blue", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_white", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_reddit", bundle: ..., traitCollection: ...)`
    static func icon_button_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_reddit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_telegram", bundle: ..., traitCollection: ...)`
    static func icon_button_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_twitter", bundle: ..., traitCollection: ...)`
    static func icon_button_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_wechat", bundle: ..., traitCollection: ...)`
    static func icon_button_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_youtube", bundle: ..., traitCollection: ...)`
    static func icon_button_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_youtube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_select", bundle: ..., traitCollection: ...)`
    static func icon_cell_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_unselect", bundle: ..., traitCollection: ...)`
    static func icon_cell_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_unselect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_back_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_close_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_close_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_close_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_photo_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_photo_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_qrcode_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_qrcode_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_qrcode_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_scan_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_scan_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_scan_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_share_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_share_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_share_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_right_white", bundle: ..., traitCollection: ...)`
    static func icon_right_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_me", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_me_select", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_me_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_me_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet_select", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_wallet_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transcation_request", bundle: ..., traitCollection: ...)`
    static func icon_transcation_request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transcation_request, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transcation_response", bundle: ..., traitCollection: ...)`
    static func icon_transcation_response(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transcation_response, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transrecord", bundle: ..., traitCollection: ...)`
    static func icon_transrecord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transrecord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_recieve", bundle: ..., traitCollection: ...)`
    static func icon_tx_recieve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_recieve, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_send", bundle: ..., traitCollection: ...)`
    static func icon_tx_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vite_logo", bundle: ..., traitCollection: ...)`
    static func icon_vite_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vite_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet", bundle: ..., traitCollection: ...)`
    static func icon_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_token_default", bundle: ..., traitCollection: ...)`
    static func icon_wallet_token_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_token_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_token_vcc", bundle: ..., traitCollection: ...)`
    static func icon_wallet_token_vcc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_token_vcc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_token_vite", bundle: ..., traitCollection: ...)`
    static func icon_wallet_token_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_token_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_screen_logo", bundle: ..., traitCollection: ...)`
    static func launch_screen_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_screen_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_about", bundle: ..., traitCollection: ...)`
    static func splash_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_slogen", bundle: ..., traitCollection: ...)`
    static func splash_slogen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_slogen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
    static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vite", bundle: ..., traitCollection: ...)`
    static func vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vite, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      /// en translation: (%@笔待确认)
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailUnconfirmedCountTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.count.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My
      /// 
      /// Locales: en, zh-Hans
      static let tabbarItemTitleMy = Rswift.StringResource(key: "tabbar.item.title.my", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let tabbarItemTitleWallet = Rswift.StringResource(key: "tabbar.item.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: create account
      /// 
      /// Locales: en, zh-Hans
      static let createAccount = Rswift.StringResource(key: "create.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: import account
      /// 
      /// Locales: en, zh-Hans
      static let importAccount = Rswift.StringResource(key: "import.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 下一项
      /// 
      /// Locales: en, zh-Hans
      static let sendPageAmountToolbarButtonTitle = Rswift.StringResource(key: "send.page.amount.toolbar.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 交易记录
      /// 
      /// Locales: en, zh-Hans
      static let myPageDealLogCellTitle = Rswift.StringResource(key: "my.page.dealLog.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static let myPageAboutUsCellTitle = Rswift.StringResource(key: "my.page.aboutUs.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 创建
      /// 
      /// Locales: en, zh-Hans
      static let createPageSubmitBtnTitle = Rswift.StringResource(key: "create.page.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 创建钱包账户
      /// 
      /// Locales: en, zh-Hans
      static let createPageTitle = Rswift.StringResource(key: "create.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 助记词
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipLabTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.lab.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 助记词已备份
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipNextBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.nextBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 取消
      /// 
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 否
      /// 
      /// Locales: en, zh-Hans
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 在途资金
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailUnconfirmedTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 地址列表
      /// 
      /// Locales: en, zh-Hans
      static let addressManageAddressHeaderTitle = Rswift.StringResource(key: "address.manage.address.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 地址管理
      /// 
      /// Locales: en, zh-Hans
      static let addressManagePageTitle = Rswift.StringResource(key: "address.manage.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 地址管理
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageAddressManageCellTitle = Rswift.StringResource(key: "manage.wallet.page.addressManage.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 备份助记词
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipNextBtn = Rswift.StringResource(key: "create.page.tip.nextBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 备份助记词
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTitle = Rswift.StringResource(key: "mnemonic.backup.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 备份钱包账户
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipTitle = Rswift.StringResource(key: "create.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 备注
      /// 
      /// Locales: en, zh-Hans
      static let sendPageRemarkTitle = Rswift.StringResource(key: "send.page.remark.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 导出助记词
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageImportMnemonicCellTitle = Rswift.StringResource(key: "manage.wallet.page.importMnemonic.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 帮助中心
      /// 
      /// Locales: en, zh-Hans
      static let myPageHelpCellTitle = Rswift.StringResource(key: "my.page.help.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 您只有通过助记词来恢复您的账户，如助记词丢失，您的数字资产将无法找回
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 按顺序选择助记词输入
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmPageTipTitle = Rswift.StringResource(key: "mnemonic.affirm.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 收款
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailReveiceButtonTitle = Rswift.StringResource(key: "balance.info.detail.reveice.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 收款地址
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToAddressTitle = Rswift.StringResource(key: "send.page.to.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 是
      /// 
      /// Locales: en, zh-Hans
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 查看交易记录
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailShowTransactionsButtonTitle = Rswift.StringResource(key: "balance.info.detail.show.transactions.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 消息中心
      /// 
      /// Locales: en, zh-Hans
      static let myPageMessageCellTitle = Rswift.StringResource(key: "my.page.message.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 确认输入助记词
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmPageTitle = Rswift.StringResource(key: "mnemonic.affirm.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 管理钱包
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageTitle = Rswift.StringResource(key: "manage.wallet.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 管理钱包
      /// 
      /// Locales: en, zh-Hans
      static let myPageMangeWalletCellTitle = Rswift.StringResource(key: "my.page.mangeWallet.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 系统设置
      /// 
      /// Locales: en, zh-Hans
      static let myPageSystemCellTitle = Rswift.StringResource(key: "my.page.system.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 请输入6位数字密码
      /// 
      /// Locales: en, zh-Hans
      static let createPagePwTitle = Rswift.StringResource(key: "create.page.pw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 账户余额
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailBalanceTitle = Rswift.StringResource(key: "balance.info.detail.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailSendButtonTitle = Rswift.StringResource(key: "balance.info.detail.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static let sendPageSendButtonTitle = Rswift.StringResource(key: "send.page.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static let sendPageTitle = Rswift.StringResource(key: "send.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 输入您的助记词
      /// 
      /// Locales: en, zh-Hans
      static let importPageTitle = Rswift.StringResource(key: "import.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 返回会重新生成助记词，是否返回
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmAlterTitle = Rswift.StringResource(key: "mnemonic.affirm.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 重复输入密码
      /// 
      /// Locales: en, zh-Hans
      static let createPagePwRepeateTitle = Rswift.StringResource(key: "create.page.pw.repeate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 重新生成助记词
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipAnewBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.anewBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 金额
      /// 
      /// Locales: en, zh-Hans
      static let sendPageAmountTitle = Rswift.StringResource(key: "send.page.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 钱包名
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageNameCellTitle = Rswift.StringResource(key: "manage.wallet.page.name.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 钱包账户名
      /// 
      /// Locales: en, zh-Hans
      static let createPageTfTitle = Rswift.StringResource(key: "create.page.tf.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 钱包账户重要提示文案订单发的发送到发送到发送到发发送发送地方少点
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipContent = Rswift.StringResource(key: "create.page.tip.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 领福利
      /// 
      /// Locales: en, zh-Hans
      static let myPageFetchMoneyCellTitle = Rswift.StringResource(key: "my.page.fetchMoney.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 默认收款地址
      /// 
      /// Locales: en, zh-Hans
      static let addressManageDefaultAddressCellTitle = Rswift.StringResource(key: "address.manage.default.address.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: (%@笔待确认)
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailUnconfirmedCountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("balance.info.detail.unconfirmed.count.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: My
      /// 
      /// Locales: en, zh-Hans
      static func tabbarItemTitleMy(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.my", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func tabbarItemTitleWallet(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: create account
      /// 
      /// Locales: en, zh-Hans
      static func createAccount(_: Void = ()) -> String {
        return NSLocalizedString("create.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: import account
      /// 
      /// Locales: en, zh-Hans
      static func importAccount(_: Void = ()) -> String {
        return NSLocalizedString("import.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 下一项
      /// 
      /// Locales: en, zh-Hans
      static func sendPageAmountToolbarButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.toolbar.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 交易记录
      /// 
      /// Locales: en, zh-Hans
      static func myPageDealLogCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.dealLog.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static func myPageAboutUsCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.aboutUs.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 创建
      /// 
      /// Locales: en, zh-Hans
      static func createPageSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 创建钱包账户
      /// 
      /// Locales: en, zh-Hans
      static func createPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 助记词
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipLabTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.lab.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 助记词已备份
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipNextBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.nextBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 取消
      /// 
      /// Locales: en, zh-Hans
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 否
      /// 
      /// Locales: en, zh-Hans
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 在途资金
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailUnconfirmedTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.unconfirmed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 地址列表
      /// 
      /// Locales: en, zh-Hans
      static func addressManageAddressHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 地址管理
      /// 
      /// Locales: en, zh-Hans
      static func addressManagePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 地址管理
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageAddressManageCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.addressManage.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 备份助记词
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipNextBtn(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.nextBtn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 备份助记词
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 备份钱包账户
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 备注
      /// 
      /// Locales: en, zh-Hans
      static func sendPageRemarkTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.remark.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static func finish(_: Void = ()) -> String {
        return NSLocalizedString("Finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 导出助记词
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageImportMnemonicCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.importMnemonic.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 帮助中心
      /// 
      /// Locales: en, zh-Hans
      static func myPageHelpCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.help.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 您只有通过助记词来恢复您的账户，如助记词丢失，您的数字资产将无法找回
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 按顺序选择助记词输入
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 收款
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailReveiceButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.reveice.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 收款地址
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.to.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 是
      /// 
      /// Locales: en, zh-Hans
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 查看交易记录
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailShowTransactionsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.show.transactions.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 消息中心
      /// 
      /// Locales: en, zh-Hans
      static func myPageMessageCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.message.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 确认输入助记词
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 管理钱包
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 管理钱包
      /// 
      /// Locales: en, zh-Hans
      static func myPageMangeWalletCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.mangeWallet.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 系统设置
      /// 
      /// Locales: en, zh-Hans
      static func myPageSystemCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.system.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 请输入6位数字密码
      /// 
      /// Locales: en, zh-Hans
      static func createPagePwTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 账户余额
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static func sendPageSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 转账
      /// 
      /// Locales: en, zh-Hans
      static func sendPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 输入您的助记词
      /// 
      /// Locales: en, zh-Hans
      static func importPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 返回会重新生成助记词，是否返回
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 重复输入密码
      /// 
      /// Locales: en, zh-Hans
      static func createPagePwRepeateTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.repeate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 重新生成助记词
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipAnewBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.anewBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 金额
      /// 
      /// Locales: en, zh-Hans
      static func sendPageAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 钱包名
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageNameCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.name.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 钱包账户名
      /// 
      /// Locales: en, zh-Hans
      static func createPageTfTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tf.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 钱包账户重要提示文案订单发的发送到发送到发送到发发送发送地方少点
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipContent(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 领福利
      /// 
      /// Locales: en, zh-Hans
      static func myPageFetchMoneyCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.fetchMoney.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 默认收款地址
      /// 
      /// Locales: en, zh-Hans
      static func addressManageDefaultAddressCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.default.address.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_screen_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_screen_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
